@* Generator: Template  GeneratePrettyNames: true *@
@using System.Collections.Generic
@using System.Linq
@using Humanizer
@using Newtonsoft.Json.Linq
@using Templates
@using Templates.CodeGen

@inherits AstSubclassTemplate

@{
    this.Layout = UseParentLayout(this);
}

@section Add_Imports{
    using System.Threading;
}

@section Ctors{
    
        internal Func(Arguments args) : base(TermType.FUNC, args, null)
        {
        }

}

@section MemberVars{
    // CHECK PARTIAL CLASS FOR MEMBERVARS
}

@section SpecialMethods{
    // CHECK PARTIAL CLASS FOR SPECIAL METHODS
}

@section StaticFactories{
    
    
    public static Func FromLambda(Delegate function){
    
        var func0 = function as ReqlFunction0;
        if( func0 != null )
        {
            return new Func(Arguments.Make(new List<object>(),
                Util.ToReqlAst( func0() )));
        }
        @foreach( var n in Enumerable.Range(1, GeneratorForAst.GetMaxArity()) )
        {
            @://Function @n
            @:var @("func"+n) = function as @("ReqlFunction"+n);
            @:if( @("func"+n) != null){
                for( int v = 1; v <= n; v++ )
                {
                @:int @("var" + v) = NextVarId();
                }
                @:var varIds = new List<int>{ 
                for( int v = 1; v <= n; v++ )
                {
                    @:var@(v + ",")
                }
                @:};

                @:var appliedFunction = @("func"+n)(
                    for (int v = 1; v <= n; v++)
                {
                    @:new Var(var@(v)) @(v == n ? "" : ",")
                }
                @:);

                @:return new Func(Arguments.Make(
                        @:new MakeArray(varIds),
                        @:Util.ToReqlAst(appliedFunction)
                @:));
            @:}
        }
    
        throw new ReqlDriverError("Arity of ReqlLambda not recognized!");
    }

    
}


@functions {
    
}
       
      